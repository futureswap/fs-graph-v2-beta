// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Trade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Trade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Trade", id.toString(), this);
  }

  static load(id: string): Trade | null {
    return store.get("Trade", id) as Trade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeId(): BigInt {
    let value = this.get("tradeId");
    return value.toBigInt();
  }

  set tradeId(value: BigInt) {
    this.set("tradeId", Value.fromBigInt(value));
  }

  get trader(): Bytes | null {
    let value = this.get("trader");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set trader(value: Bytes | null) {
    if (value === null) {
      this.unset("trader");
    } else {
      this.set("trader", Value.fromBytes(value as Bytes));
    }
  }

  get leverage(): BigInt | null {
    let value = this.get("leverage");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set leverage(value: BigInt | null) {
    if (value === null) {
      this.unset("leverage");
    } else {
      this.set("leverage", Value.fromBigInt(value as BigInt));
    }
  }

  get collateral(): BigInt | null {
    let value = this.get("collateral");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt | null) {
    if (value === null) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBigInt(value as BigInt));
    }
  }

  get openFee(): BigInt | null {
    let value = this.get("openFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set openFee(value: BigInt | null) {
    if (value === null) {
      this.unset("openFee");
    } else {
      this.set("openFee", Value.fromBigInt(value as BigInt));
    }
  }

  get assetMarketPrice(): BigInt | null {
    let value = this.get("assetMarketPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetMarketPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("assetMarketPrice");
    } else {
      this.set("assetMarketPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get isLiquidated(): boolean {
    let value = this.get("isLiquidated");
    return value.toBoolean();
  }

  set isLiquidated(value: boolean) {
    this.set("isLiquidated", Value.fromBoolean(value));
  }

  get isOpen(): boolean {
    let value = this.get("isOpen");
    return value.toBoolean();
  }

  set isOpen(value: boolean) {
    this.set("isOpen", Value.fromBoolean(value));
  }

  get stablePrice(): BigInt | null {
    let value = this.get("stablePrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stablePrice(value: BigInt | null) {
    if (value === null) {
      this.unset("stablePrice");
    } else {
      this.set("stablePrice", Value.fromBigInt(value as BigInt));
    }
  }

  get percentToClose(): BigInt | null {
    let value = this.get("percentToClose");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set percentToClose(value: BigInt | null) {
    if (value === null) {
      this.unset("percentToClose");
    } else {
      this.set("percentToClose", Value.fromBigInt(value as BigInt));
    }
  }

  get assetOpenPrice(): BigInt | null {
    let value = this.get("assetOpenPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetOpenPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("assetOpenPrice");
    } else {
      this.set("assetOpenPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get assetRedemptionAmount(): BigInt | null {
    let value = this.get("assetRedemptionAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetRedemptionAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("assetRedemptionAmount");
    } else {
      this.set("assetRedemptionAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get lastUpdate(): i32 {
    let value = this.get("lastUpdate");
    return value.toI32();
  }

  set lastUpdate(value: i32) {
    this.set("lastUpdate", Value.fromI32(value));
  }

  get openedAt(): i32 {
    let value = this.get("openedAt");
    return value.toI32();
  }

  set openedAt(value: i32) {
    this.set("openedAt", Value.fromI32(value));
  }

  get referral(): Bytes | null {
    let value = this.get("referral");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set referral(value: Bytes | null) {
    if (value === null) {
      this.unset("referral");
    } else {
      this.set("referral", Value.fromBytes(value as Bytes));
    }
  }
}

export class OpenedTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OpenedTrade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OpenedTrade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OpenedTrade", id.toString(), this);
  }

  static load(id: string): OpenedTrade | null {
    return store.get("OpenedTrade", id) as OpenedTrade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeId(): BigInt {
    let value = this.get("tradeId");
    return value.toBigInt();
  }

  set tradeId(value: BigInt) {
    this.set("tradeId", Value.fromBigInt(value));
  }

  get trader(): Bytes | null {
    let value = this.get("trader");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set trader(value: Bytes | null) {
    if (value === null) {
      this.unset("trader");
    } else {
      this.set("trader", Value.fromBytes(value as Bytes));
    }
  }

  get leverage(): BigInt | null {
    let value = this.get("leverage");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set leverage(value: BigInt | null) {
    if (value === null) {
      this.unset("leverage");
    } else {
      this.set("leverage", Value.fromBigInt(value as BigInt));
    }
  }

  get collateral(): BigInt | null {
    let value = this.get("collateral");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt | null) {
    if (value === null) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBigInt(value as BigInt));
    }
  }

  get openFee(): BigInt | null {
    let value = this.get("openFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set openFee(value: BigInt | null) {
    if (value === null) {
      this.unset("openFee");
    } else {
      this.set("openFee", Value.fromBigInt(value as BigInt));
    }
  }

  get assetMarketPrice(): BigInt | null {
    let value = this.get("assetMarketPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetMarketPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("assetMarketPrice");
    } else {
      this.set("assetMarketPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get stablePrice(): BigInt | null {
    let value = this.get("stablePrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stablePrice(value: BigInt | null) {
    if (value === null) {
      this.unset("stablePrice");
    } else {
      this.set("stablePrice", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ClosedTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ClosedTrade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ClosedTrade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ClosedTrade", id.toString(), this);
  }

  static load(id: string): ClosedTrade | null {
    return store.get("ClosedTrade", id) as ClosedTrade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeId(): BigInt {
    let value = this.get("tradeId");
    return value.toBigInt();
  }

  set tradeId(value: BigInt) {
    this.set("tradeId", Value.fromBigInt(value));
  }

  get trader(): Bytes | null {
    let value = this.get("trader");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set trader(value: Bytes | null) {
    if (value === null) {
      this.unset("trader");
    } else {
      this.set("trader", Value.fromBytes(value as Bytes));
    }
  }

  get referral(): Bytes | null {
    let value = this.get("referral");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set referral(value: Bytes | null) {
    if (value === null) {
      this.unset("referral");
    } else {
      this.set("referral", Value.fromBytes(value as Bytes));
    }
  }

  get stablePrice(): BigInt | null {
    let value = this.get("stablePrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stablePrice(value: BigInt | null) {
    if (value === null) {
      this.unset("stablePrice");
    } else {
      this.set("stablePrice", Value.fromBigInt(value as BigInt));
    }
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get percentToClose(): BigInt | null {
    let value = this.get("percentToClose");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set percentToClose(value: BigInt | null) {
    if (value === null) {
      this.unset("percentToClose");
    } else {
      this.set("percentToClose", Value.fromBigInt(value as BigInt));
    }
  }

  get openFee(): BigInt | null {
    let value = this.get("openFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set openFee(value: BigInt | null) {
    if (value === null) {
      this.unset("openFee");
    } else {
      this.set("openFee", Value.fromBigInt(value as BigInt));
    }
  }

  get assetOpenPrice(): BigInt | null {
    let value = this.get("assetOpenPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetOpenPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("assetOpenPrice");
    } else {
      this.set("assetOpenPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get assetRedemptionAmount(): BigInt | null {
    let value = this.get("assetRedemptionAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetRedemptionAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("assetRedemptionAmount");
    } else {
      this.set("assetRedemptionAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get assetMarketPrice(): BigInt | null {
    let value = this.get("assetMarketPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set assetMarketPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("assetMarketPrice");
    } else {
      this.set("assetMarketPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get isLiquidated(): boolean {
    let value = this.get("isLiquidated");
    return value.toBoolean();
  }

  set isLiquidated(value: boolean) {
    this.set("isLiquidated", Value.fromBoolean(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class AddedCollateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AddedCollateral entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AddedCollateral entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AddedCollateral", id.toString(), this);
  }

  static load(id: string): AddedCollateral | null {
    return store.get("AddedCollateral", id) as AddedCollateral | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeId(): BigInt {
    let value = this.get("tradeId");
    return value.toBigInt();
  }

  set tradeId(value: BigInt) {
    this.set("tradeId", Value.fromBigInt(value));
  }

  get trader(): Bytes | null {
    let value = this.get("trader");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set trader(value: Bytes | null) {
    if (value === null) {
      this.unset("trader");
    } else {
      this.set("trader", Value.fromBytes(value as Bytes));
    }
  }

  get addedCollateral(): BigInt {
    let value = this.get("addedCollateral");
    return value.toBigInt();
  }

  set addedCollateral(value: BigInt) {
    this.set("addedCollateral", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class LiquidatedTrade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidatedTrade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidatedTrade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidatedTrade", id.toString(), this);
  }

  static load(id: string): LiquidatedTrade | null {
    return store.get("LiquidatedTrade", id) as LiquidatedTrade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tradeId(): BigInt {
    let value = this.get("tradeId");
    return value.toBigInt();
  }

  set tradeId(value: BigInt) {
    this.set("tradeId", Value.fromBigInt(value));
  }

  get trader(): Bytes | null {
    let value = this.get("trader");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set trader(value: Bytes | null) {
    if (value === null) {
      this.unset("trader");
    } else {
      this.set("trader", Value.fromBytes(value as Bytes));
    }
  }

  get liquidator(): Bytes | null {
    let value = this.get("liquidator");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set liquidator(value: Bytes | null) {
    if (value === null) {
      this.unset("liquidator");
    } else {
      this.set("liquidator", Value.fromBytes(value as Bytes));
    }
  }

  get stableToSendLiquidator(): BigInt | null {
    let value = this.get("stableToSendLiquidator");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stableToSendLiquidator(value: BigInt | null) {
    if (value === null) {
      this.unset("stableToSendLiquidator");
    } else {
      this.set("stableToSendLiquidator", Value.fromBigInt(value as BigInt));
    }
  }

  get stableToSendTradeOwner(): BigInt | null {
    let value = this.get("stableToSendTradeOwner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stableToSendTradeOwner(value: BigInt | null) {
    if (value === null) {
      this.unset("stableToSendTradeOwner");
    } else {
      this.set("stableToSendTradeOwner", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}
